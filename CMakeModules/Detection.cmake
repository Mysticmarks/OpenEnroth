set(OE_BUILD_PLATFORM "unknown")
set(OE_BUILD_ARCHITECTURE "unknown")

if(WIN32)
    set(OE_BUILD_PLATFORM "windows")
elseif(MINGW)
    set(OE_BUILD_PLATFORM "mingw")
    message(FATAL_ERROR "OpenEnroth does not support MinGW, use clang or MSVC.")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(OE_BUILD_PLATFORM "darwin")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(OE_BUILD_PLATFORM "linux")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Android")
    set(OE_BUILD_PLATFORM "android")
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    set(OE_BUILD_PLATFORM "freebsd")
elseif(CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
    set(OE_BUILD_PLATFORM "openbsd")
elseif(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
    set(OE_BUILD_PLATFORM "netbsd")
elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
    set(OE_BUILD_PLATFORM "ios")
endif()

# We are being quite lazy here and only distinguishing between "x86", "x86_64", "arm32", "arm64".
# Yes, "arm32" / "arm64" are questionable catch-alls, but so far there was no need for anything more specific.
# A better way is to compile a binary and grep the resulting .obj file, but that's a bit too much for now.
set(X86_PROCESSORS "x86_64" "i386" "i686" "amd64" "x86")
set(ARM_PROCESSORS "arm64" "aarch64" "armv7-a" "armv8b" "armv8l" "arm")
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" CMAKE_SYSTEM_PROCESSOR_LOWER)
if ("${CMAKE_SYSTEM_PROCESSOR_LOWER}" IN_LIST X86_PROCESSORS)
    if (CMAKE_SIZEOF_VOID_P MATCHES 8)
        set(OE_BUILD_ARCHITECTURE "x86_64")
    elseif (CMAKE_SIZEOF_VOID_P MATCHES 4)
        set(OE_BUILD_ARCHITECTURE "x86")
    endif ()
elseif("${CMAKE_SYSTEM_PROCESSOR_LOWER}" IN_LIST ARM_PROCESSORS)
    if (CMAKE_SIZEOF_VOID_P MATCHES 8)
        set(OE_BUILD_ARCHITECTURE "arm64")
    elseif (CMAKE_SIZEOF_VOID_P MATCHES 4)
        set(OE_BUILD_ARCHITECTURE "arm32")
    endif ()
endif()

# Override OE_BUILD_ARCHITECTURE based on CMAKE_OSX_ARCHITECTURES if we are cross-compiling.
if(CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
    set(OE_BUILD_ARCHITECTURE "arm64")
elseif(CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
    set(OE_BUILD_ARCHITECTURE "x86_64")
elseif(NOT "${CMAKE_OSX_ARCHITECTURES}" STREQUAL "")
    message(WARNING "Value of CMAKE_OSX_ARCHITECTURES (${CMAKE_OSX_ARCHITECTURES}) not recognized. Are you trying a multi-architecture build? This is not supported.")
endif()

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Build platform: ${OE_BUILD_PLATFORM}")
message(STATUS "Build architecture: ${OE_BUILD_ARCHITECTURE}")
message(STATUS "C compiler id: ${CMAKE_C_COMPILER_ID}")
message(STATUS "C++ compiler id: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "C compiler frontend variant: ${CMAKE_C_COMPILER_FRONTEND_VARIANT}")
message(STATUS "C++ compiler frontend variant: ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}")
message(STATUS "C simulate id (ABI compatibility): ${CMAKE_C_SIMULATE_ID}")
message(STATUS "C++ simulate id (ABI compatibility): ${CMAKE_CXX_SIMULATE_ID}")
message(STATUS "C compiler path: ${CMAKE_C_COMPILER}")
message(STATUS "C++ compiler path: ${CMAKE_CXX_COMPILER}")
message(STATUS "C default linker id: ${CMAKE_C_COMPILER_LINKER_ID}")
message(STATUS "C++ default linker id: ${CMAKE_CXX_COMPILER_LINKER_ID}")
message(STATUS "C default linker frontend variant: ${CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT}")
message(STATUS "C++ default linker frontend variant: ${CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT}")
message(STATUS "C default linker path: ${CMAKE_C_COMPILER_LINKER}")
message(STATUS "C++ default linker path: ${CMAKE_CXX_COMPILER_LINKER}")
message(STATUS "Additional C compiler flags: ${CMAKE_C_FLAGS}")
message(STATUS "Additional C++ compiler flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "Additional binary linker flags: ${CMAKE_EXE_LINKER_FLAGS}")
message(STATUS "Additional shared linker flags: ${CMAKE_SHARED_LINKER_FLAGS}")
# There is also CMAKE_MODULE_LINKER_FLAGS for add_library(MODULE) targets, we're not using those.
if(OE_BUILD_PLATFORM STREQUAL "darwin" OR OE_BUILD_PLATFORM STREQUAL "ios")
    message(STATUS "MacOS platform SDK path: ${CMAKE_OSX_SYSROOT}")
    message(STATUS "MacOS deployment target: ${CMAKE_OSX_DEPLOYMENT_TARGET}")
endif()
